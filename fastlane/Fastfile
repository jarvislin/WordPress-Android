default_platform(:android)
fastlane_require 'dotenv'

UI.user_error!('Please run fastlane via `bundle exec`') unless FastlaneCore::Helper.bundler?

# NOTE: When updating the `promo_config` keys of those locale, ensure it matches the list
# of locales enabled in `.circleci/config.yml` for the `raw-screenshots` job
ALL_LOCALES = [
  # First are the locales which are used for *both* downloading the `strings.xml` files from GlotPress *and* for generating the release notes XML files.
  { glotpress: 'ar', android: 'ar',    google_play: 'ar',     promo_config: {} },
  { glotpress: 'de', android: 'de',    google_play: 'de-DE',  promo_config: {} },
  { glotpress: 'en-gb', android: 'en-rGB', google_play: 'en-US', promo_config: {} },
  { glotpress: 'es', android: 'es', google_play: 'es-ES', promo_config: {} },
  { glotpress: 'fr', android: 'fr-rCA', google_play: 'fr-CA', promo_config: false },
  { glotpress: 'fr', android: 'fr',    google_play: 'fr-FR',  promo_config: {} },
  { glotpress: 'he', android: 'he',    google_play: 'iw-IL',  promo_config: {} },
  { glotpress: 'id', android: 'id',    google_play: 'id',     promo_config: {} },
  { glotpress: 'it', android: 'it',    google_play: 'it-IT',  promo_config: {} },
  { glotpress: 'ja', android: 'ja',    google_play: 'ja-JP',  promo_config: {} },
  { glotpress: 'ko', android: 'ko',    google_play: 'ko-KR',  promo_config: {} },
  { glotpress: 'nl', android: 'nl',    google_play: 'nl-NL',  promo_config: {} },
  { glotpress: 'pl', android: 'pl',    google_play: 'pl-PL',  promo_config: {} },
  { glotpress: 'pt-br', android: 'pt-rBR', google_play: 'pt-BR', promo_config: {} },
  { glotpress: 'ru', android: 'ru',    google_play: 'ru-RU',  promo_config: {} },
  { glotpress: 'sr', android: 'sr',    google_play: 'sr',     promo_config: {} },
  { glotpress: 'sv', android: 'sv',    google_play: 'sv-SE',  promo_config: {} },
  { glotpress: 'th', android: 'th',    google_play: 'th',     promo_config: {} },
  { glotpress: 'tr', android: 'tr',    google_play: 'tr-TR',  promo_config: {} },
  { glotpress: 'vi', android: 'vi',    google_play: 'vi',     promo_config: {} },
  { glotpress: 'zh-cn', android: 'zh-rCN', google_play: 'zh-CN',  promo_config: {} },
  { glotpress: 'zh-tw', android: 'zh-rTW', google_play: 'zh-TW',  promo_config: {} },
  # From this point are locales that are still used for downloading `strings.xml`… but not for release notes – and thus don't need a `google_play` key. See `RELEASE_NOTES_LOCALES` below.
  { glotpress: 'az', android: 'az', promo_config: false },
  { glotpress: 'el', android: 'el', promo_config: false },
  { glotpress: 'es-mx', android: 'es-rMX', promo_config: false },
  { glotpress: 'es-cl', android: 'es-rCL', promo_config: false },
  { glotpress: 'gd', android: 'gd', promo_config: false },
  { glotpress: 'hi', android: 'hi', promo_config: false },
  { glotpress: 'hu', android: 'hu', promo_config: false },
  { glotpress: 'nb', android: 'nb', promo_config: false },
  { glotpress: 'pl', android: 'pl', promo_config: false },
  { glotpress: 'th', android: 'th', promo_config: false },
  { glotpress: 'uz', android: 'uz', promo_config: false },
  { glotpress: 'zh-tw', android: 'zh-rHK', promo_config: false },
  { glotpress: 'eu', android: 'eu', promo_config: false },
  { glotpress: 'ro', android: 'ro', promo_config: false },
  { glotpress: 'mk', android: 'mk', promo_config: false },
  { glotpress: 'en-au', android: 'en-rAU', promo_config: false },
  { glotpress: 'sr', android: 'sr', promo_config: false },
  { glotpress: 'sk', android: 'sk', promo_config: false },
  { glotpress: 'cy', android: 'cy', promo_config: false },
  { glotpress: 'da', android: 'da', promo_config: false },
  { glotpress: 'bg', android: 'bg', promo_config: false },
  { glotpress: 'sq', android: 'sq', promo_config: false },
  { glotpress: 'hr', android: 'hr', promo_config: false },
  { glotpress: 'cs', android: 'cs', promo_config: false },
  { glotpress: 'pt-br', android: 'pt-rBR', promo_config: false },
  { glotpress: 'en-ca', android: 'en-rCA', promo_config: false },
  { glotpress: 'ms', android: 'ms', promo_config: false },
  { glotpress: 'es-ve', android: 'es-rVE', promo_config: false },
  { glotpress: 'gl', android: 'gl', promo_config: false },
  { glotpress: 'is', android: 'is' },
  { glotpress: 'es-co', android: 'es-rCO', promo_config: false },
  { glotpress: 'kmr', android: 'kmr', promo_config: false },
].freeze

RELEASE_NOTES_LOCALES = ALL_LOCALES
  .reject { |h| h[:google_play].nil? }
  .map { |h| [h[:glotpress], h[:google_play]] }
JP_RELEASE_NOTES_LOCALES = ALL_LOCALES
  .reject { |h| h[:google_play].nil? }
  .select { |h| %w[ar de-DE es-ES fr-FR iw-IL id it-IT ja-JP ko-KR nl-NL pt-BR ru-RU sv-SE tr-TR zh-CN zh-TW].include?(h[:google_play]) }
  .map { |h| [h[:glotpress], h[:google_play]] }

APP_SPECIFIC_VALUES = {
  wordpress: {
    metadata_dir: 'metadata',
    gp_url: 'https://translate.wordpress.org/projects/apps/android/release-notes/',
    package_name: 'org.wordpress.android',
    bundle_name_prefix: 'wpandroid'
  },
  jetpack: {
    metadata_dir: 'jetpack_metadata',
    gp_url: 'https://translate.wordpress.com/projects/jetpack/apps/android/release-notes/',
    package_name: 'com.jetpack.android',
    bundle_name_prefix: 'jpandroid'
  }
}.freeze


UPLOAD_TO_PLAY_STORE_JSON_KEY = File.join(Dir.home, '.configure', 'wordpress-android', 'secrets', 'google-upload-credentials.json')

# Env file paths to load
USER_ENV_FILE_PATH = File.join(Dir.home, '.wpandroid-env.default')

before_all do |lane|
  # Check that the env file exists
  unless is_ci || File.file?(USER_ENV_FILE_PATH)
    UI.user_error!("#{USER_ENV_FILE_PATH} not found: Please copy fastlane/env/user.env-example to #{USER_ENV_FILE_PATH} and fill in the values")
  end

  # Ensure we use the latest version of the toolkit
  check_for_toolkit_updates unless is_ci || ENV['FASTLANE_SKIP_TOOLKIT_UPDATE_CHECK']
end

platform :android do
########################################################################
# Includes
########################################################################
import './ScreenshotFastfile'

# Environment
########################################################################
Dotenv.load(USER_ENV_FILE_PATH)
ENV[GHHELPER_REPO = 'wordpress-mobile/WordPress-Android']
ENV['PROJECT_ROOT_FOLDER'] = File.dirname(File.expand_path(__dir__)) + '/'
ENV['FL_RELEASE_TOOLKIT_DEFAULT_BRANCH'] = 'trunk'
REPOSITORY_NAME = 'WordPress-Android'

########################################################################
# Release Lanes
########################################################################
#####################################################################################
  # code_freeze
  # -----------------------------------------------------------------------------------
  # This lane executes the steps planned on code freeze
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane code_freeze [update_release_branch_version:<update flag>] [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane code_freeze
  # bundle exec fastlane code_freeze update_release_branch_version:false
  # bundle exec fastlane code_freeze skip_confirm:true
  #####################################################################################
  desc 'Creates a new release branch from the current trunk'
  lane :code_freeze do |options|
    old_version = android_codefreeze_prechecks(skip_confirm: options[:skip_confirm])

    android_bump_version_release()
    new_version = android_get_app_version()

    extract_release_notes_for_version(
      version: new_version,
      release_notes_file_path: "#{ENV['PROJECT_ROOT_FOLDER']}RELEASE-NOTES.txt",
      extracted_notes_file_path: release_notes_path('wordpress')
    )
    # Jetpack Release notes are based on WP Release notes
    begin
      # FIXME: Move this logic to release-toolkit?
      FileUtils.cp(release_notes_path('wordpress'), release_notes_path('jetpack'))
      sh('git', 'add', release_notes_path('jetpack'))
      sh('git', 'commit', '-m', "Update draft release notes for Jetpack #{new_version}.")
    end
    cleanup_release_files(files: release_notes_short_paths)

    android_update_release_notes(new_version: new_version) # Adds empty section for next version
    setbranchprotection(repository: GHHELPER_REPO, branch: "release/#{new_version}")
    setfrozentag(repository: GHHELPER_REPO, milestone: new_version)

    UI.message("Jetpack release notes were based on the same ones as WordPress. Don't forget to check #{release_notes_path('jetpack')} and amend them as necessary if any item does not apply for Jetpack before sending them to Editorial.")
  end

  #####################################################################################
  # complete_code_freeze
  # -----------------------------------------------------------------------------------
  # This lane executes the initial steps planned on code freeze
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane complete_code_freeze [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane complete_code_freeze
  # bundle exec fastlane complete_code_freeze skip_confirm:true
  #####################################################################################
  desc 'Trigger a release build for a given app after code freeze'
  lane :complete_code_freeze do |options|
    android_completecodefreeze_prechecks(skip_confirm: options[:skip_confirm])

    localize_libraries
    update_frozen_strings_for_translation

    ensure_git_status_clean
    push_to_git_remote

    new_version = android_get_app_version()
    trigger_release_build(branch_to_build: "release/#{new_version}")
  end

  #####################################################################################
  # update_appstore_strings
  # -----------------------------------------------------------------------------------
  # This lane gets the data from the txt files in the `WordPress/metadata/` and
  # `WordPress/jetpack_metadata/` folders and updates the `.po` files that is then
  # picked by GlotPress for translations.
  # -----------------------------------------------------------------------------------
  # Usage:
  # fastlane update_appstore_strings version:<version>
  #
  # Example:
  # fastlane update_appstore_strings version:10.3
  #####################################################################################
  desc 'Updates the PlayStoreStrings.po files for WP + JP'
  lane :update_appstore_strings do |options|
    update_wordpress_appstore_strings(options)
    update_jetpack_appstore_strings(options)
  end

  #####################################################################################
  # update_wordpress_appstore_strings
  # -----------------------------------------------------------------------------------
  # This lane gets the data from the txt files in the `WordPress/metadata/` folder
  # and updates the `.po` file that is then picked by GlotPress for translations.
  # -----------------------------------------------------------------------------------
  # Usage:
  # fastlane update_wordpress_appstore_strings version:<version>
  #
  # Example:
  # fastlane update_wordpress_appstore_strings version:10.3
  #####################################################################################
  desc 'Updates the PlayStoreStrings.po file for WordPress'
  lane :update_wordpress_appstore_strings do |options|
    metadata_folder = File.join(Dir.pwd, '..', 'WordPress', 'metadata')

    # <key in po file> => <path to txt file to read the content from>
    files = {
      release_note: File.join(metadata_folder, 'release_notes.txt'),
      release_note_short: File.join(metadata_folder, 'release_notes_short.txt'),
      play_store_promo: File.join(metadata_folder, 'short_description.txt'),
      play_store_desc: File.join(metadata_folder, 'full_description.txt'),
      play_store_app_title: File.join(metadata_folder, 'title.txt'),
    }
    files.merge!((1..9).map do |n|
      [:"play_store_screenshot_#{n}", File.join(metadata_folder, "screenshot_#{n}.txt")]
    end.to_h)

    android_update_metadata_source(
      po_file_path: File.join(metadata_folder, 'PlayStoreStrings.po'),
      source_files: files,
      release_version: options[:version]
    )
  end

  #####################################################################################
  # update_jetpack_appstore_strings
  # -----------------------------------------------------------------------------------
  # This lane gets the data from the txt files in the `WordPress/jetpack_metadata/` folder
  # and updates the `.po` file that is then picked by GlotPress for translations.
  # -----------------------------------------------------------------------------------
  # Usage:
  # fastlane update_jetpack_appstore_strings version:<version>
  #
  # Example:
  # fastlane update_jetpack_appstore_strings version:10.3
  #####################################################################################
  desc 'Updates the PlayStoreStrings.po file for Jetpack'
  lane :update_jetpack_appstore_strings do |options|
    metadata_folder = File.join(Dir.pwd, '..', 'WordPress', 'jetpack_metadata')

    files = {
      release_note: File.join(metadata_folder, 'release_notes.txt'),
      release_note_short: File.join(metadata_folder, 'release_notes_short.txt'),
      'short-description': File.join(metadata_folder, 'short_description.txt'),
      'app-store-description': File.join(metadata_folder, 'full_description.txt'),
      'app-store-name': File.join(metadata_folder, 'title.txt'),
    }

    android_update_metadata_source(
      po_file_path: metadata_folder = File.join(metadata_folder, 'PlayStoreStrings.po'),
      source_files: files,
      release_version: options[:version]
    )
  end

  #####################################################################################
  # new_beta_release
  # -----------------------------------------------------------------------------------
  # This lane updates the release branch for a new beta release. It will update the
  # current release branch by default. If you want to update a different branch
  # (i.e. hotfix branch) pass the related version with the 'base_version' param
  # (example: base_version:10.6.1 will work on the 10.6.1 branch)
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane new_beta_release [skip_confirm:<skip confirm>] [base_version:<version>]
  #
  # Example:
  # bundle exec fastlane new_beta_release
  # bundle exec fastlane new_beta_release skip_confirm:true
  # bundle exec fastlane new_beta_release base_version:10.6.1
  #####################################################################################
  desc 'Updates a release branch for a new beta release'
  lane :new_beta_release do |options|
    android_betabuild_prechecks(base_version: options[:base_version], skip_confirm: options[:skip_confirm])
    update_frozen_strings_for_translation
    download_translations()
    android_bump_version_beta()
    new_version = android_get_app_version()
    trigger_release_build(branch_to_build: "release/#{new_version}")
  end

  #####################################################################################
  # new_hotfix_release
  # -----------------------------------------------------------------------------------
  # This lane updates the release branch for a new hotfix release.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane new_hotfix_release [skip_confirm:<skip confirm>] [version_name:<x.y.z>] [version_code:<nnnn>]
  #
  # Example:
  # bundle exec fastlane new_hotfix_release version_name:10.6.1 version_code:1070
  #####################################################################################
  desc 'Prepare a new hotfix branch cut from the previous tag, and bump the version'
  lane :new_hotfix_release do |options|
    hotfix_version = options[:version_name] || UI.input('Version number for the new hotfix?')
    previous_tag = android_hotfix_prechecks(version_name: hotfix_version, skip_confirm: options[:skip_confirm])
    android_bump_version_hotfix(previous_version_name: previous_tag, version_name: hotfix_version, version_code: options[:version_code])
  end

  #####################################################################################
  # finalize_hotfix_release
  # -----------------------------------------------------------------------------------
  # This lane finalizes the hotfix branch.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane finalize_hotfix_release
  #
  # Example:
  # bundle exec fastlane finalize_hotfix_release
  #####################################################################################
  desc 'Finalizes a hotfix release by triggering a release build'
  lane :finalize_hotfix_release do |options|
    new_version = android_get_app_version()
    trigger_release_build(branch_to_build: "release/#{new_version}")
  end

  #####################################################################################
  # finalize_release
  # -----------------------------------------------------------------------------------
  # This lane finalize a release: updates store metadata and runs the release checks
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane finalize_release [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane finalize_release
  # bundle exec fastlane finalize_release skip_confirm:true
  #####################################################################################
  desc 'Updates store metadata and runs the release checks'
  lane :finalize_release do |options|
    UI.user_error!('Please use `finalize_hotfix_release` lane for hotfixes') if android_current_branch_is_hotfix()

    android_finalize_prechecks(skip_confirm: options[:skip_confirm])
    configure_apply(force: is_ci)

    check_translations_coverage()
    download_translations()

    android_bump_version_final_release()
    version = android_get_release_version()
    download_metadata_strings(version: version['name'], build_number: version['code'])

    # Wrap up
    removebranchprotection(repository: GHHELPER_REPO, branch: "release/#{version['name']}")
    setfrozentag(repository: GHHELPER_REPO, milestone: version['name'], freeze: false)
    create_new_milestone(repository: GHHELPER_REPO)
    close_milestone(repository: GHHELPER_REPO, milestone: version['name'])

    # Trigger release build
    trigger_release_build(branch_to_build: "release/#{version['name']}")
  end

  lane :check_translations_coverage do |options|
    UI.message('Checking app strings translation status...')
    check_translation_progress(
      glotpress_url: 'https://translate.wordpress.org/projects/apps/android/dev/',
      abort_on_violations: false,
      skip_confirm: options[:skip_confirm] || false
    )

    UI.message('Checking WordPress release notes strings translation status...')
    check_translation_progress(
      glotpress_url: APP_SPECIFIC_VALUES[:wordpress][:gp_url],
      abort_on_violations: false,
      skip_confirm: options[:skip_confirm] || false
    )

    UI.message('Checking Jetpack release notes strings translation status...')
    check_translation_progress(
      glotpress_url: APP_SPECIFIC_VALUES[:jetpack][:gp_url],
      abort_on_violations: false,
      skip_confirm: options[:skip_confirm] || false
    )

  end

  #####################################################################################
  # build_and_upload_release
  # -----------------------------------------------------------------------------------
  # This lane builds the final release of the app and uploads it
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_release app:<wordpress|jetpack> [skip_confirm:<skip confirm>] [skip_prechecks:<skip prechecks>] [create_release:<Create release on GH> ]
  #
  # Example:
  # bundle exec fastlane build_and_upload_release app:wordpress
  # bundle exec fastlane build_and_upload_release app:wordpress skip_confirm:true
  # bundle exec fastlane build_and_upload_release app:jetpack skip_prechecks:true
  # bundle exec fastlane build_and_upload_release app:wordpress create_release:true
  #####################################################################################
  desc 'Builds and updates for distribution'
  lane :build_and_upload_release do |options|
    android_build_prechecks(
      skip_confirm: options[:skip_confirm],
      alpha: false,
      beta: false,
      final: true
    )
    android_build_preflight() unless options[:skip_prechecks]

    # Create the file names
    app = get_app_name_option!(options)
    version = android_get_release_version()
    build_bundle(app: app, version: version, flavor: 'Vanilla', buildType: 'Release')

    upload_build_to_play_store(app: app, version: version, track: 'production')

    create_gh_release(app: app, version: version) if options[:create_release]
  end

  #####################################################################################
  # build_and_upload_pre_releases
  # -----------------------------------------------------------------------------------
  # This lane builds the app for both internal and external distribution and uploads them
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_pre_releases app:<wordpress|jetpack> [skip_confirm:<true|false>] [skip_prechecks:<true|false>] <[create_release:<true|false>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_pre_releases
  # bundle exec fastlane build_and_upload_pre_releases skip_confirm:true
  # bundle exec fastlane build_and_upload_beta create_release:true
  #####################################################################################
  desc 'Builds and updates for distribution'
  lane :build_and_upload_pre_releases do |options|
    android_build_prechecks(
      skip_confirm: options[:skip_confirm],
      alpha: true,
      beta: true,
      final: false
    )
    android_build_preflight() unless options[:skip_prechecks]
    app = get_app_name_option!(options)
    build_alpha(app: app, skip_prechecks: true, skip_confirm: options[:skip_confirm], upload_to_play_store: true, create_release: options[:create_release])
    build_beta(app: app, skip_prechecks: true, skip_confirm: options[:skip_confirm], upload_to_play_store: true, create_release: options[:create_release])
  end

  #####################################################################################
  # build_alpha
  # -----------------------------------------------------------------------------------
  # This lane builds the app for internal testing and optionally uploads it
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_alpha app:<wordpress|jetpack> [skip_confirm:<true|false>] [upload_to_play_store:<true|false>] [create_release:<true|false>]
  #
  # Example:
  # bundle exec fastlane build_alpha app:wordpress create_release:true
  # bundle exec fastlane build_alpha app:wordpress skip_confirm:true upload_to_play_store:true
  # bundle exec fastlane build_alpha app:jetpack
  #####################################################################################
  desc 'Builds and updates for distribution'
  lane :build_alpha do |options|
    android_build_prechecks(skip_confirm: options[:skip_confirm], alpha: true) unless options[:skip_prechecks]
    android_build_preflight() unless options[:skip_prechecks]

    # Create the file names
    app = get_app_name_option!(options)
    version = android_get_alpha_version()
    build_bundle(app: app, version: version, flavor: 'Zalpha', buildType: 'Release')

    upload_build_to_play_store(app: app, version: version, track: 'alpha') if options[:upload_to_play_store]

    create_gh_release(app: app, version: version, prerelease: true) if options[:create_release]
  end

  #####################################################################################
  # build_beta
  # -----------------------------------------------------------------------------------
  # This lane builds the app for internal testing and optionally uploads it
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_beta app:<wordpress|jetpack> [skip_confirm:<true|false>] [upload_to_play_store:<true|false>] [create_release:<true|false>]
  #
  # Example:
  # bundle exec fastlane build_beta app:wordpress create_release:true
  # bundle exec fastlane build_beta app:wordpress skip_confirm:true upload_to_play_store:true
  # bundle exec fastlane build_beta app:jetpack create_release:true
  #####################################################################################
  desc 'Builds and updates for distribution'
  lane :build_beta do |options|
    android_build_prechecks(skip_confirm: options[:skip_confirm], beta: true) unless options[:skip_prechecks]
    android_build_preflight() unless options[:skip_prechecks]

    # Create the file names
    app = get_app_name_option!(options)
    version = android_get_release_version()
    build_bundle(app: app, version: version, flavor: 'Vanilla', buildType: 'Release')

    upload_build_to_play_store(app: app, version: version, track: 'beta') if options[:upload_to_play_store]

    create_gh_release(app: app, version: version, prerelease: true) if options[:create_release]
  end

  #####################################################################################
  # build_internal
  # -----------------------------------------------------------------------------------
  # This lane builds the app for restricted internal testing, and optionally uploads it to PlayStore's Internal track
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_internal app:<wordpress|jetpack> [skip_confirm:<true|false>] [upload_to_play_store:<true|false>] [create_release:<true|false>]
  #
  # Example:
  # bundle exec fastlane build_internal app:wordpress
  # bundle exec fastlane build_internal app:wordpress skip_confirm:true upload_to_play_store:true
  # bundle exec fastlane build_internal app:jetpack create_release:true
  #####################################################################################
  desc 'Builds and updates for internal testing'
  lane :build_internal do |options|
    android_build_prechecks(skip_confirm: options[:skip_confirm]) unless options[:skip_prechecks]
    android_build_preflight() unless options[:skip_prechecks]

    # Create the file names
    app = get_app_name_option!(options)
    version = android_get_release_version()
    build_bundle(app: app, version: version, flavor: 'Zalpha', buildType: 'Debug')

    upload_build_to_play_store(app: app, version: version, track: 'internal') if options[:upload_to_play_store]

    create_gh_release(app: app, version: version, prerelease: true) if options[:create_release]
  end

  #####################################################################################
  # upload_build_to_play_store
  # -----------------------------------------------------------------------------------
  # This lane uploads the build to Play Store for the given version to the given track
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane upload_build_to_play_store app:<wordpress|jetpack> version:<version> track:<track>
  #
  # Example:
  # bundle exec fastlane upload_build_to_play_store app:wordpress version:15.0 track:production
  # bundle exec fastlane upload_build_to_play_store app:wordpress version:alpha-228 track:alpha
  # bundle exec fastlane upload_build_to_play_store app:jetpack version:15.0-rc-1 track:beta
  #####################################################################################
  desc 'Upload Build to Play Store'
  lane :upload_build_to_play_store do |options|

    app = get_app_name_option!(options)
    package_name = APP_SPECIFIC_VALUES[app.to_sym][:package_name]

    version = options[:version]

    if version.nil?
      UI.message("No version available for #{options[:track]} track for #{app}")
      next
    end

    aab_file_path = bundle_file_path(app, version)

    if File.exist? aab_file_path then
      retry_count = 2
      begin
        upload_to_play_store(
          package_name: package_name,
          aab: aab_file_path,
          track: options[:track],
          release_status: 'draft',
          skip_upload_metadata: true,
          skip_upload_changelogs: true,
          skip_upload_images: true,
          skip_upload_screenshots: true,
          json_key: UPLOAD_TO_PLAY_STORE_JSON_KEY
        )
      rescue FastlaneCore::Interface::FastlaneError => ex
        # Sometimes the upload fails randomly with a "Google Api Error: Invalid request - This Edit has been deleted.".
        # It seems one reason might be a race condition when we do multiple edits at the exact same time (WP alpha, WP beta, JP beta). Retrying usually fixes it
        if ex.message.start_with?('Google Api Error') && (retry_count -= 1) > 0
          UI.error "Upload failed with Google API error. Retrying in 2mn..."
          sleep(120)
          retry
        end
        raise
      end
    else
      UI.error("Unable to find a build artifact at #{aab_file_path}")
    end
  end

  # Updates the metadata (from `fastlane/{metadata|jetpack_metadata}/android/*/*.txt`) in the PlayStore (Main store listing).
  #
  # @option [String] app The app to update the metadata for. Mandatory. Must be one of `wordpress` or `jetpack`.
  #
  desc 'Uploads the localized metadata to the PlayStore.'
  lane :upload_playstore_localized_metadata do |options|
    app = get_app_name_option!(options)
    package_name = APP_SPECIFIC_VALUES[app.to_sym][:package_name]
    metadata_dir = File.join('fastlane', APP_SPECIFIC_VALUES[app.to_sym][:metadata_dir], 'android')
    version_code = android_get_release_version['code']

    # TODO: This is currently a separate lane so we can invoke it separately, but if after a couple of sprints we see that it works well,
    #       it we would make sense to remove the lane and instead directly use `skip_upload_metadata: (options[:track] != 'production')`
    #       in the `upload_build_to_play_store` lane? (especially if we do the same for `skip_upload_changelogs` and get rid of `android_create_xml_release_notes`)
    upload_to_play_store(
      package_name: package_name,
      json_key: UPLOAD_TO_PLAY_STORE_JSON_KEY,
      track: 'production',
      version_code: version_code, # Apparently required by fastlane… even if the "Main Store Listing" isn't be attached to a specific build ¯\_(ツ)_/¯
      metadata_path: metadata_dir,
      skip_upload_apk: true,
      skip_upload_aab: true,
      skip_upload_metadata: false,
      # TODO: enable changelogs upload once we drop the `android_create_xml_release_notes` action call (and drop the step in release scenario)
      skip_upload_changelogs: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
  end

  #####################################################################################
  # trigger_release_build
  # -----------------------------------------------------------------------------------
  # This lane triggers a stable release build on CI
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane trigger_release_build branch_to_build:<branch_name>
  #
  #####################################################################################
  lane :trigger_release_build do |options|
    circleci_trigger_job(
      circle_ci_token: ENV['CIRCLE_CI_AUTH_TOKEN'],
      repository: REPOSITORY_NAME,
      branch: options[:branch_to_build],
      job_params: { 'release_build' => true }
    )
  end

  #####################################################################################
  # upload_and_replace_screenshots_in_play_store
  # -----------------------------------------------------------------------------------
  # This lane uploads the screenshots in /metadata/android/{locale}/images to Play
  # Store and replaces the existing ones.
  # If a locale doesn't have any screenshots, it'll be skipped.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane upload_and_replace_screenshots_in_play_store
  #
  # Example:
  # bundle exec fastlane upload_and_replace_screenshots_in_play_store
  #####################################################################################
  desc 'Upload Screenshots to Play Store and Replaces the existing ones'
  lane :upload_and_replace_screenshots_in_play_store do |options|
    upload_to_play_store(
      package_name: 'org.wordpress.android',
      skip_upload_apk: true,
      skip_upload_aab: true,
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_images: true,
      skip_upload_screenshots: false,
      json_key: UPLOAD_TO_PLAY_STORE_JSON_KEY
    )
  end

  #####################################################################################
  # download_metadata_strings
  # -----------------------------------------------------------------------------------
  # This lane downloads the translated metadata (release notes, app store strings, title, etc.)
  # from GlotPress and updates the local files
  # -----------------------------------------------------------------------------------
  # Usage:
  # fastlane download_metadata_strings build_number:<build_number> version:<version>
  #
  # Example:
  # fastlane download_metadata_strings build_number:573 version:10.3
  #####################################################################################
  desc 'Downloads translated metadata from GlotPress'
  lane :download_metadata_strings do |options|
    download_wordpress_metadata_strings(options)
    download_jetpack_metadata_strings(options)
  end

  desc "Downloads WordPress's translated metadata from GlotPress"
  lane :download_wordpress_metadata_strings do |options|
    app_values = APP_SPECIFIC_VALUES[:wordpress]
    values = options[:version].split('.')
    files = {
      "release_note_#{values[0]}#{values[1]}" => { desc: "changelogs/#{options[:build_number]}.txt", max_size: 500, alternate_key: "release_note_short_#{values[0]}#{values[1]}" },
      play_store_app_title: { desc: 'title.txt', max_size: 30 },
      play_store_promo: { desc: 'short_description.txt', max_size: 80 },
      play_store_desc: { desc: 'full_description.txt', max_size: 0 }
    }

    delete_old_changelogs(app: 'wordpress', build: options[:build_number])
    download_path = File.join(Dir.pwd, app_values[:metadata_dir], 'android')
    # The case for the source locale (en-US) is pulled in a hacky way, by having an {en-gb => en-US} mapping as part of the RELEASE_NOTES_LOCALES,
    # which is then treated in a special way by gp_downloadmetadata by specifying a `source_locale: 'en-US'` to process it differently from the rest.
    gp_downloadmetadata(
      project_url: app_values[:gp_url],
      target_files: files,
      locales: RELEASE_NOTES_LOCALES,
      source_locale: 'en-US',
      download_path: download_path
    )

    android_create_xml_release_notes(download_path: download_path, build_number: "#{options[:build_number]}", locales: RELEASE_NOTES_LOCALES)
    sh("git add #{download_path} && git commit -m \"Update WordPress metadata translations for #{options[:version]}\" && git push origin HEAD")
  end

  desc "Downloads Jetpack's translated metadata from GlotPress"
  lane :download_jetpack_metadata_strings do |options|
    UI.message('Hey')
    app_values = APP_SPECIFIC_VALUES[:jetpack]
    values = options[:version].split('.')
    files = {
      "release_note_#{values[0]}#{values[1]}" => { desc: "changelogs/#{options[:build_number]}.txt", max_size: 500, alternate_key: "release_note_short_#{values[0]}#{values[1]}" },
      'app-store-name': { desc: 'title.txt', max_size: 30 },
      'short-description': { desc: 'short_description.txt', max_size: 80 },
      'app-store-description': { desc: 'full_description.txt', max_size: 0 }
    }

    delete_old_changelogs(app: 'jetpack', build: options[:build_number])
    download_path = File.join(Dir.pwd, app_values[:metadata_dir], 'android')
    gp_downloadmetadata(
      project_url: app_values[:gp_url],
      target_files: files,
      locales: JP_RELEASE_NOTES_LOCALES,
      download_path: download_path
    )

    # For WordPress, the en-US release notes come from using the source keys (instead of translations) downloaded from GlotPress' en-gb locale (which is unused otherwise).
    # But for Jetpack, we don't have an unused locale like en-gb in the GP release notes project, so copy from source instead as a fallback
    metadata_source_dir = File.join(Dir.pwd, '..', 'WordPress', 'jetpack_metadata')
    FileUtils.cp(File.join(metadata_source_dir, 'release_notes.txt'), File.join(download_path, 'en-US', 'changelogs', "#{options[:build_number]}.txt"))
    FileUtils.cp(
      ['title.txt', 'short_description.txt', 'full_description.txt'].map { |f| File.join(metadata_source_dir, f) },
      File.join(download_path, 'en-US')
    )

    locales_including_enUS = [['en-gb', 'en-US']] + JP_RELEASE_NOTES_LOCALES # first item (GlotPress locale) unused for this action; second param = google_play locale
    android_create_xml_release_notes(download_path: download_path, build_number: "#{options[:build_number]}", locales: locales_including_enUS)
    sh("git add #{download_path} && git commit -m \"Update Jetpack metadata translations for #{options[:version]}\" && git push origin HEAD")
  end

########################################################################
# Libraries Translation Merging
########################################################################
  MAIN_STRINGS_PATH = './WordPress/src/main/res/values/strings.xml'.freeze
  FROZEN_STRINGS_DIR_PATH = './fastlane/resources/values/'.freeze
  LOCAL_LIBRARIES_STRINGS_PATHS = [
    { library: "Image Editor", strings_path: "./libs/image-editor/ImageEditor/src/main/res/values/strings.xml", exclusions: [] }
  ].freeze
  REMOTE_LIBRARIES_STRINGS_PATHS = [
    {
      name: 'Gutenberg Native',
      import_key: 'gutenbergMobileVersion',
      repository: 'wordpress-mobile/gutenberg-mobile',
      strings_file_path: 'bundle/android/strings.xml',
      github_release_prefix: '',
      exclusions: [],
      merge_tool: File.join(ENV['PROJECT_ROOT_FOLDER'], 'tools', 'merge_strings_xml.py')
    },
    {
      name: 'Login Library',
      import_key: 'wordPressLoginVersion',
      repository: 'wordpress-mobile/WordPress-Login-Flow-Android',
      strings_file_path: 'WordPressLoginFlow/src/main/res/values/strings.xml',
      github_release_prefix: '',
      exclusions: ['default_web_client_id']
    },
    {
      name: "Stories Library",
      import_key: "storiesVersion",
      repository: "Automattic/stories-android",
      strings_file_path: "stories/src/main/res/values/strings.xml",
      github_release_prefix: "",
      exclusions: []
    },
    {
      name: "About Library",
      import_key: "aboutAutomatticVersion",
      repository: "Automattic/about-automattic-android",
      strings_file_path: "library/src/main/res/values/strings.xml",
      github_release_prefix: "",
      exclusions: []
    },
  ].freeze

  lane :update_frozen_strings_for_translation do
    # We need to `cd` to the parent directory because, unlike when calling fastlane actions, commands running directly from the `Fastfile`
    # (like `FileUtils` calls here) run relative to the `./fastlane` folder, but the `*_DIR_PATH` we use are relative to the repo root.
    # See: https://docs.fastlane.tools/advanced/fastlane/#directory-behavior
    Dir.chdir('..') do
      FileUtils.mkdir_p(FROZEN_STRINGS_DIR_PATH)
      FileUtils.cp(MAIN_STRINGS_PATH, FROZEN_STRINGS_DIR_PATH)
    end
    git_commit(path: File.join(FROZEN_STRINGS_DIR_PATH, 'strings.xml'), message: 'Freeze strings for translation', allow_nothing_to_commit: true)
  end

  desc 'Merge libraries strings files into the main app one'
  lane :localize_libraries do
    # Merge `strings.xml` files of libraries that are hosted locally in the repository (in `./libs` folder)
    an_localize_libs(app_strings_path: MAIN_STRINGS_PATH, libs_strings_path: LOCAL_LIBRARIES_STRINGS_PATHS)

    # Merge `strings.xml` files of libraries that are hosted in separate repositories (and linked as binary dependencies with the project)
    REMOTE_LIBRARIES_STRINGS_PATHS.each do |lib|
      download_path = android_download_file_by_version(
        library_name: lib[:name],
        import_key: lib[:import_key],
        repository: lib[:repository],
        file_path: lib[:strings_file_path],
        github_release_prefix: lib[:github_release_prefix]
      )

      if download_path.nil?
        error_message = <<~ERROR
          Can't download strings file for #{lib[:name]}.
          Strings for this library won't get translated.
          Do you want to continue anyway?
        ERROR
        UI.user_error! 'Abort.' unless UI.confirm(error_message)
      else
        UI.message("`strings.xml` file for #{lib[:name]} downloaded to #{download_path}.")
        if lib.key?(:merge_tool)
          sh(lib[:merge_tool], lib[:name], download_path)
        else
          lib_to_merge = [{
            library: lib[:name],
            strings_path: download_path,
            exclusions: lib[:exclusions]
          }]
          an_localize_libs(app_strings_path: MAIN_STRINGS_PATH, libs_strings_path: lib_to_merge)
        end
        File.delete(download_path) if File.exist?(download_path)
      end
    end

    # Commit changes
    git_commit(path: MAIN_STRINGS_PATH, message: 'Merge strings from libraries for translation', allow_nothing_to_commit: true)
  end

########################################################################
# Helper Lanes
########################################################################
  #####################################################################################
  # build_bundle
  # -----------------------------------------------------------------------------------
  # This lane builds an app bundle
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_bundle app:<wordpress|jetpack> version:<version> flavor:<flavor> buildType:<debug|release> [skip_lint:<true|false>]
  #####################################################################################
  desc 'Builds an app bundle'
  lane :build_bundle do |options|
    # Create the file names
    version = options[:version]
    app = get_app_name_option!(options)

    if version.nil?
      UI.message("Version specified for #{app} bundle is nil. Skipping ahead")
      next
    end

    prefix = APP_SPECIFIC_VALUES[app.to_sym][:bundle_name_prefix]
    name = "#{prefix}-#{version['name']}.aab"

    aab_file = "org.wordpress.android-#{app}-#{options[:flavor]}-#{options[:buildType]}.aab".downcase
    output_dir = 'WordPress/build/outputs/bundle/'
    build_dir = 'build/'
    logfile_path = "#{build_dir}build.log"

    # Intermediate Variables
    bundle_path = "#{output_dir}#{app}#{options[:flavor].capitalize}#{options[:buildType].capitalize}/#{aab_file}"

    # Build
    Dir.chdir('..') do
      sh("mkdir -p #{build_dir}")

      UI.message('Cleaning branch...')
      sh("echo \"Cleaning branch\" >> #{logfile_path}")
      sh("./gradlew clean >> #{logfile_path} 2>&1")

      sh("mkdir -p #{build_dir}")
      if options[:skip_lint].nil?
        UI.message('Running lint...')
        sh("echo \"Running lint...\" >> #{logfile_path}")
        sh("./gradlew lint#{app}#{options[:flavor]}#{options[:buildType]} >> #{logfile_path} 2>&1") unless is_ci
      else
        UI.message('Skipping lint...')
      end

      UI.message("Building #{version['name']} / #{version['code']} - #{aab_file}...")
      sh("echo \"Building #{version['name']} / #{version['code']} - #{aab_file}...\" >> #{logfile_path}")
      sh("./gradlew bundle#{app}#{options[:flavor]}#{options[:buildType]} >> #{logfile_path} 2>&1")

      UI.crash!("Unable to find a bundle at #{bundle_path}") unless File.file?(bundle_path)

      sh("cp -v #{bundle_path} #{build_dir}#{name} | tee -a #{logfile_path}")
      UI.message("Bundle ready: #{name}")
      sh("echo \"Bundle ready: #{name}\" >> #{logfile_path}")
    end
    "#{build_dir}#{name}"
  end

  #####################################################################################
  # download_translations
  # -----------------------------------------------------------------------------------
  # This lane downloads the string translations from GlotPress
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane download_translations
  #####################################################################################
  lane :download_translations do
    # For now WordPress and Jetpack use the same GlotPress project and share the same `strings.xml`
    # (the Jetpack-dedicated one, https://translate.wordpress.com/projects/jetpack/apps/android/, is empty anyway for now).
    android_download_translations(
      res_dir: File.join('WordPress', 'src', 'main', 'res'),
      glotpress_url: 'https://translate.wordpress.org/projects/apps/android/dev/',
      locales: ALL_LOCALES,
      lint_task: 'lintWordpressVanillaRelease' # TODO: Should we adapt this?
    )
  end

  #####################################################################################
  # create_gh_release
  # -----------------------------------------------------------------------------------
  # This lane creates a GitHub release for the current version
  #   - Attaching the existing .aab files in `build/` as the release assets
  #   - Using the WP & JP release_notes.txt as description
  #   - If `prerelease:<true|false>`` is not provided, the pre-release status will be inferred from the version name
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane create_gh_release [app:<wordpress|jetpack>] [version:<Hash{name,code}>] [prerelease:<true|false>]
  #
  # Examples:
  # bundle exec fastlane create_gh_release     # Guesses prerelease status based on version name. Includes existing assets for WPAlpha+WPBeta+JPBeta
  # bundle exec fastlane create_gh_release app:wordpress prerelease:true                        # Includes existing assets for WPAlpha+WPBeta
  # bundle exec fastlane create_gh_release version:{name:12.3-rc-4} prerelease:true             # Includes existing assets for WPBeta+JPBeta 12.3-rc-4
  # bundle exec fastlane create_gh_release app:jetpack version:{name:12.3-rc-4} prerelease:true # Includes only existing asset for JPBeta 12.3-rc-4
  #####################################################################################
  lane :create_gh_release do |options|
    apps = options[:app].nil? ? ['wordpress', 'jetpack'] : [get_app_name_option!(options)]
    versions = options[:version].nil? ? [android_get_alpha_version(), android_get_release_version()] : [options[:version]]

    release_assets = apps.flat_map do |app|
      versions.flat_map { |vers| bundle_file_path(app, vers) }
    end.select { |f| File.exist?(f) }

    release_title = versions.last['name']
    set_prerelease_flag = options[:prerelease].nil? ? /-rc-|alpha-/.match?(release_title) : options[:prerelease]

    UI.message("Creating release for #{release_title} with the following assets: #{release_assets.inspect}")

    app_titles = { 'wordpress' => 'WordPress', 'jetpack' => 'Jetpack' }
    tmp_file = File.absolute_path('unified-release-notes.txt')
    unified_notes = apps.map do |app|
      notes = File.read(release_notes_path(app))
      "\#\# #{app_titles[app]}\n\n#{notes}"
    end.join("\n\n")
    File.write(tmp_file, unified_notes)

    create_release(
      repository: GHHELPER_REPO,
      version: release_title,
      release_notes_file_path: tmp_file,
      prerelease: set_prerelease_flag,
      release_assets: release_assets.join(',')
    )

    FileUtils.rm(tmp_file)
  end

#####################################################################################
# Private lanes
#####################################################################################

  private_lane :delete_old_changelogs do |options|
    app = get_app_name_option!(options)
    app_values = APP_SPECIFIC_VALUES[app.to_sym]
    Dir.glob(File.join(app_values[:metadata_dir], 'android', '*', 'changelogs', '*')).each do |file|
      if Integer(File.basename(file, '.*')) < Integer(options[:build])
        File.delete(file)
      end rescue puts "Cannot delete file #{file}"
    end
  end

  private_lane :cleanup_release_files do |options|
    files = options[:files]

    files.each do |f|
      File.open(f, 'w') {}
      sh("git add #{f}")
    end

    sh('git diff-index --quiet HEAD || git commit -m "Clean up release files."')
  end

  #####################################################################################
  # Utils
  #####################################################################################
  def get_app_name_option!(options)
    app = options[:app]&.downcase
    UI.user_error!("Missing 'app' parameter. Expected 'app:wordpress' or 'app:jetpack'") if app.nil?
    unless ['wordpress', 'jetpack'].include?(app)
      UI.user_error!("Invalid 'app' parameter #{app.inspect}. Expected 'wordpress' or 'jetpack'")
    end
    return app
  end

  def release_notes_path(app)
    paths = {
      wordpress: "#{ENV['PROJECT_ROOT_FOLDER']}WordPress/metadata/release_notes.txt",
      jetpack: "#{ENV['PROJECT_ROOT_FOLDER']}WordPress/jetpack_metadata/release_notes.txt"
    }
    paths[app.to_sym] || paths[:wordpress]
  end

  def release_notes_short_paths
    project_root = File.dirname(File.expand_path(File.dirname(__FILE__)))
    [
      File.join(project_root, 'WordPress', 'metadata', 'release_notes_short.txt'),
      File.join(project_root, 'WordPress', 'jetpack_metadata', 'release_notes_short.txt')
    ]
  end

  def bundle_file_path(app, version)
    prefix = APP_SPECIFIC_VALUES[app.to_sym][:bundle_name_prefix]
    project_root = File.dirname(File.expand_path(File.dirname(__FILE__)))
    File.join(project_root, 'build', "#{prefix}-#{version['name']}.aab")
  end
end
